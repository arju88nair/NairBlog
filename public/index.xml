<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I learned</title>
    <link>/</link>
    <description>Recent content on Today I learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2018, all rights reserved.</copyright>
    <lastBuildDate>Tue, 10 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>This is to take notes and to keep track of my musings (If you can call that)
Disclaimer : I do not own most of these contents.Almost all of them are from different sites and blogs.This is just for me to have my learning resources in one place. Most of the time, I don&amp;rsquo;t remember where I got these contents from. Credits to those owners
You can reach me at :</description>
    </item>
    
    <item>
      <title>React Hooks</title>
      <link>/post/react-hooks/</link>
      <pubDate>Thu, 13 Dec 2018 22:04:51 +0530</pubDate>
      
      <guid>/post/react-hooks/</guid>
      <description>React Hooks Lets you use state and other React features without writing a class.
 import { useState } from &#39;react&#39;; function Example() { // Declare a new state variable, which we&#39;ll call &amp;quot;count&amp;quot; const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt; Click me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); }  In React class components, side-effects were mostly introduced in lifecycle methods (e.</description>
    </item>
    
    <item>
      <title>React Hooks</title>
      <link>/post/react-js/</link>
      <pubDate>Thu, 13 Dec 2018 22:04:51 +0530</pubDate>
      
      <guid>/post/react-js/</guid>
      <description> Basics Components splits the UI into independent, reusable pieces, and think about each piece in isolation.
 function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } // OR class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } }  Rendering
function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } const element = &amp;lt;Welcome name=&amp;quot;Sara&amp;quot; /&amp;gt;; ReactDOM.render( element, document.getElementById(&#39;root&#39;) );  </description>
    </item>
    
    <item>
      <title>Javascript II</title>
      <link>/post/javascript-ii/</link>
      <pubDate>Mon, 10 Dec 2018 14:44:59 +0530</pubDate>
      
      <guid>/post/javascript-ii/</guid>
      <description>Array methods forEach()  const arr = [1, 2, 3, 4, 5, 6]; arr.forEach(item =&amp;gt; { console.log(item); // output: 1 2 3 4 5 6 });  ## includes()
This method check if array includes the item passed in the method.
 const arr = [1, 2, 3, 4, 5, 6]; arr.includes(2); // output: true arr.includes(7); // output: false  filter() This method create new array with only elements passed condition inside the provided function.</description>
    </item>
    
    <item>
      <title>Promises and Generators</title>
      <link>/post/promises-generators/</link>
      <pubDate>Fri, 30 Nov 2018 21:49:43 +0530</pubDate>
      
      <guid>/post/promises-generators/</guid>
      <description>Promises  A proxy for a value not necessarily known when the promise is created.
An asynchronous function is a function which operates asynchronously via the event loop, using an implicit Promise to return its result.
then() consumes a Promise while await waits for a promise to be resolved
 Once a promise has been called, it will start in pending state. This means that the caller function continues the execution, while it waits for the promise to do its own processing, and give the caller function some feedback.</description>
    </item>
    
    <item>
      <title>MysqlNotes</title>
      <link>/post/mysqlnotes/</link>
      <pubDate>Wed, 28 Nov 2018 21:42:31 +0530</pubDate>
      
      <guid>/post/mysqlnotes/</guid>
      <description>CREATE DATABASE mydb;
use mydb
CREATE TABLE mytable ( id int unsigned NOT NULL auto_increment, username varchar(100) NOT NULL, email varchar(100) NOT NULL, PRIMARY KEY (id) ); CREATE T  SHOW databases;
SHOW tables;
DESCRIBE databaseName.tableName; - Show all the fields of a table
Users and Roles CREATE USER &#39;user&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39; - Localhost for where the user can connect from and can only connect on the local machine where the database is hosted.</description>
    </item>
    
    <item>
      <title>Algoriths Data_Structures</title>
      <link>/post/algoriths-data_structures/</link>
      <pubDate>Fri, 23 Nov 2018 22:13:24 +0530</pubDate>
      
      <guid>/post/algoriths-data_structures/</guid>
      <description>Algorithms + Data structures = Programming
Algorithms -1</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>/post/linux/</link>
      <pubDate>Mon, 19 Nov 2018 20:19:34 +0530</pubDate>
      
      <guid>/post/linux/</guid>
      <description>Most of the notes are from LinuxNotesForProfessionals
 Terminal = text input/output environment Console = physical terminal Shell = command line interpreter  hostname - Display hostname of the system
who - List of all the users currently logged in as a user.
w - Display current system status, time, duration, list of users currently logged in on system and other user information.
last - Who recently used the system.</description>
    </item>
    
    <item>
      <title>Map Reduce and Filter</title>
      <link>/post/mapreducefilter/</link>
      <pubDate>Thu, 15 Nov 2018 21:24:18 +0530</pubDate>
      
      <guid>/post/mapreducefilter/</guid>
      <description>Map Reduce and Filter .map() To modify an array or it&amp;rsquo;s objects
map receives a callback as an argument. That callback is then given the current value of the iteration, the index of the iteration and the original array from which map was called
const arr = [1,2,3,4,5]; const newArray = arr.map(i =&amp;gt; i*10); // return a new array with all value as multiple of 10;  var officers = [ { id: 20, name: &#39;Captain Piett&#39; }, { id: 24, name: &#39;General Veers&#39; }, { id: 56, name: &#39;Admiral Ozzel&#39; }, { id: 88, name: &#39;Commander Jerjerrod&#39; } ]; var officersIds = officers.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>/post/dependency-injection/</link>
      <pubDate>Wed, 14 Nov 2018 12:47:21 +0530</pubDate>
      
      <guid>/post/dependency-injection/</guid>
      <description>Dependency injection is a technique whereby one object supplies the dependencies of another object
class Profile { public function deactivateProfile(Setting $setting) { $setting-&amp;gt;isActive = false; } }  Advantages  Decoupling Their purpose is isolated and can easily be swapped out by other components later. This way your code will be cleaner and decoupled.
 Reusable code Another advantage of dependency injection is that your code will be more reusable since there are no direct dependencies on other entities (objects or classes) in your code.</description>
    </item>
    
    <item>
      <title>Redux 1</title>
      <link>/post/redux-1/</link>
      <pubDate>Mon, 01 Oct 2018 21:39:04 +0530</pubDate>
      
      <guid>/post/redux-1/</guid>
      <description>Redux is a predictable state container for JavaScript apps. import { createStore } from &amp;quot;redux&amp;quot;; //an import from the redux library const store = createStore(); // Takes reducer as argument  Store stores the states and reducers handles the communication
Reducers modifies the state based on action in pure state
In redux, all application state exists as a single store object
Spread operator or splat operator copies the contents of one array object into another.</description>
    </item>
    
    <item>
      <title>Databases</title>
      <link>/post/databases/</link>
      <pubDate>Wed, 08 Aug 2018 19:59:38 +0530</pubDate>
      
      <guid>/post/databases/</guid>
      <description>Relational databases like MySQL, PostgreSQL and SQLite3 represent and store data in tables and rows.
 They&amp;rsquo;re based on a branch of algebraic set theory known as relational algebra.
 Mongo query targets of data are technically represented as BSON (binary JASON).
 Relational databases use Structured Querying Language (SQL), making them a good choice for applications that involve the management of several transactions.
 ACID - Atomicity (each transaction be &amp;ldquo;all or nothing&amp;rdquo;), Consistency (any transaction will bring the database from one valid state to another), Isoloation (concurrent execution of transactions results in a system state that would be obtained if transactions were executed sequentially), Durability (once a transaction has been committed, it will remain so)</description>
    </item>
    
    <item>
      <title>What Happens When</title>
      <link>/post/what-happens-when/</link>
      <pubDate>Mon, 23 Jul 2018 11:43:30 +0530</pubDate>
      
      <guid>/post/what-happens-when/</guid>
      <description>This is a short version of the question what happens when you enter google.com in your browser.  credit When you type &amp;ldquo;G&amp;rdquo;  The browser receives the event and the auto-complete functions kick in. Various suggestions will be presented to you in the dropbox below the URL bar   When you press &amp;ldquo;Enter&amp;rdquo;  Small amount of current to flow into the logic circuitry of the keyboard, which scans the state of each key switch, debounces the electrical noise of the rapid intermittent closure of the switch, and converts it to a keycode integer, in this case 13.</description>
    </item>
    
    <item>
      <title>Programms</title>
      <link>/post/programms/</link>
      <pubDate>Sun, 22 Jul 2018 13:51:09 +0530</pubDate>
      
      <guid>/post/programms/</guid>
      <description>Factorial &amp;lt;?php $number = 6; /*number to get factorial */ $fact = 1; for($k=1;$k&amp;lt;=$number;++$k) { $fact = $fact*$k; } echo &amp;quot;Factorial of $number is &amp;quot;.$fact; ?&amp;gt;  Fibonacci &amp;lt;?PHP $first = 0; $second = 1; echo $first.&#39;&amp;amp;nbsp;,&#39;; echo $second.&#39;&amp;amp;nbsp;,&#39;; for($limit=0;$limit&amp;lt;10;$limit++) { $third = $first+$second; echo $third.&#39;&amp;amp;nbsp;,&#39;;; $first = $second; $second = $third; } ?&amp;gt;  Amstrong &amp;lt;?php $number = $_POST[ &#39;number&#39; ]; // get the number entered by user $temp = $number; $sum = 0; while($temp !</description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>/post/javascript/</link>
      <pubDate>Sun, 22 Jul 2018 13:50:50 +0530</pubDate>
      
      <guid>/post/javascript/</guid>
      <description>Callback functions They are derived from a programming paradigm known as functional programmings
A callback function, also known as a higher-order function, is a function that is passed to another function Eg:
 $(&amp;quot;#btn_1&amp;quot;).click(function() { alert(&amp;quot;Btn 1 Clicked&amp;quot;); });  Functional programming (often abbreviated FP) is the process of building software by composing pure functions, avoiding shared state, mutable data, and side-effects
A pure function is a function which: Given the same inputs, always returns the same output, and Has no side-effects</description>
    </item>
    
    <item>
      <title>Laravel</title>
      <link>/post/laravel/</link>
      <pubDate>Fri, 20 Jul 2018 18:08:33 +0530</pubDate>
      
      <guid>/post/laravel/</guid>
      <description>LifeCycle
 &amp;ldquo;bootstrapped&amp;rdquo;? In general, means registering things, including registering service container bindings, event listeners, middleware, and even routes.
 index.php
 Loads the Composer generated autoloader definition, and then retrieves an instance of the Laravel application from bootstrap/app.php script. The first action taken by Laravel itself is to create an instance of the application  HTTP / Console Kernels
 The incoming request is sent to either the HTTP kernel or the console kernel, depending on the type of request that is entering the application</description>
    </item>
    
    <item>
      <title>PHP Part 2</title>
      <link>/post/php-2/</link>
      <pubDate>Mon, 16 Jul 2018 13:14:11 +0530</pubDate>
      
      <guid>/post/php-2/</guid>
      <description>Error Control Operators  @ - Suppresses errors
 extract()  It converts array keys into variable names and array values into variable value.
  // input array $state = array(&amp;quot;AS&amp;quot;=&amp;gt;&amp;quot;ASSAM&amp;quot;, &amp;quot;OR&amp;quot;=&amp;gt;&amp;quot;ORRISA&amp;quot;, &amp;quot;KR&amp;quot;=&amp;gt;&amp;quot;KERELA&amp;quot;); extract($state); // after using extract() function echo&amp;quot;\$AS is $AS\n\$KR is $KR\n\$OR is $OR&amp;quot;; ------ $AS is ASSAM $KR is KERELA $OR is ORRISA  Autoload Every time you want to use a new class in your PHP project, first you need to include this class .</description>
    </item>
    
    <item>
      <title>PHP7</title>
      <link>/post/php7/</link>
      <pubDate>Thu, 12 Jul 2018 17:13:19 +0530</pubDate>
      
      <guid>/post/php7/</guid>
      <description>New to PHP 7  New Zend engine Fast Facilitates Error Handling using exceptions 64-Bit Windows Systems Support New Spaceship and Null Coalescing Operators(&amp;lt;=&amp;gt; The spaceship operator returns 0 if both operands are equal, 1 if the left is greater, and -1 if the right is greater. It’s also called a three-way comparison operator)  PHP 7  Scalar type declarations, has been introduced. Scalar type declaration has two options   coercive - coercive is default mode and need not to be specified.</description>
    </item>
    
    <item>
      <title>When I Did</title>
      <link>/post/when-i-did/</link>
      <pubDate>Wed, 11 Jul 2018 21:20:13 +0530</pubDate>
      
      <guid>/post/when-i-did/</guid>
      <description>Trifle hacks I did Bash commands for lazying Lazy git  For easy git add, commit and push
function gitl() { git add . git commit -a -m &amp;quot;$*&amp;quot; git push origin master }   PHP switches  Switching between PHP versions
 function on7() { sudo a2dismod php5.6 &amp;amp;&amp;amp; sudo a2enmod php7.1 &amp;amp;&amp;amp; sudo service apache2 restart }  function on5() { sudo a2dismod php7.1 &amp;amp;&amp;amp; sudo a2enmod php5.</description>
    </item>
    
    <item>
      <title>Nginx Server Block</title>
      <link>/post/nginx-server-block/</link>
      <pubDate>Wed, 11 Jul 2018 17:31:55 +0530</pubDate>
      
      <guid>/post/nginx-server-block/</guid>
      <description>Nginx This is just a copy of the server configuration of my EC2 instance which contains a Django, PHP and a static applications.
The Django application is served by the help of Uwsgi and Nginx courtesy of this article To quote the article,
 This will serve as an interface to our applications which will translate client requests using HTTP to Python calls that our application can process. We will then set up Nginx in front of uWSGI to take advantage of its high performance connection handling mechanisms and its easy-to-implement security features.</description>
    </item>
    
    <item>
      <title>PHP Part 1</title>
      <link>/post/php-1/</link>
      <pubDate>Wed, 11 Jul 2018 17:02:17 +0530</pubDate>
      
      <guid>/post/php-1/</guid>
      <description>One important principle of OOP is that a class should do one thing, and it should do it well.  Polymorphism - which classes have different functionality while sharing a common interface.
 Implements to extend an interface in PM
 An interface is similar to a class except that it cannot contain code. An interface can define method names and arguments, but not the contents of the methods.A class can implement multiple interfaces.</description>
    </item>
    
    <item>
      <title>Tidbits</title>
      <link>/post/tidbits/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tidbits/</guid>
      <description>Make command  The make command accepts targets as command line arguments. These targets are usually specified in a file named &amp;lsquo;Makefile&amp;rsquo;, which also contains the associated action corresponding to the targets.
 Splat operator This feature allows you to capture a variable number of arguments to a function, combined with &amp;ldquo;normal&amp;rdquo; arguments passed in if you like. It&amp;rsquo;s easiest to see with an example:
 function concatenate($transform, ...$strings) { $string = &#39;&#39;; foreach($strings as $piece) { $string .</description>
    </item>
    
  </channel>
</rss>