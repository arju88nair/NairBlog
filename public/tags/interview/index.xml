<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interview on Today I learned</title>
    <link>/tags/interview/</link>
    <description>Recent content in Interview on Today I learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2018, all rights reserved.</copyright>
    <lastBuildDate>Thu, 15 Nov 2018 21:24:18 +0530</lastBuildDate>
    
	<atom:link href="/tags/interview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Map Reduce and Filter</title>
      <link>/post/javascript-2/</link>
      <pubDate>Thu, 15 Nov 2018 21:24:18 +0530</pubDate>
      
      <guid>/post/javascript-2/</guid>
      <description>Map Reduce and Filter .map() To modify an array or it&amp;rsquo;s objects
map receives a callback as an argument. That callback is then given the current value of the iteration, the index of the iteration and the original array from which map was called
const arr = [1,2,3,4,5]; const newArray = arr.map(i =&amp;gt; i*10); // return a new array with all value as multiple of 10;  var officers = [ { id: 20, name: &#39;Captain Piett&#39; }, { id: 24, name: &#39;General Veers&#39; }, { id: 56, name: &#39;Admiral Ozzel&#39; }, { id: 88, name: &#39;Commander Jerjerrod&#39; } ]; var officersIds = officers.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>/post/dependency-injection/</link>
      <pubDate>Wed, 14 Nov 2018 12:47:21 +0530</pubDate>
      
      <guid>/post/dependency-injection/</guid>
      <description>Dependency injection is a technique whereby one object supplies the dependencies of another object
class Profile { public function deactivateProfile(Setting $setting) { $setting-&amp;gt;isActive = false; } }  Advantages  Decoupling Their purpose is isolated and can easily be swapped out by other components later. This way your code will be cleaner and decoupled.
 Reusable code Another advantage of dependency injection is that your code will be more reusable since there are no direct dependencies on other entities (objects or classes) in your code.</description>
    </item>
    
    <item>
      <title>Promises</title>
      <link>/post/promises/</link>
      <pubDate>Fri, 02 Nov 2018 11:14:30 +0530</pubDate>
      
      <guid>/post/promises/</guid>
      <description>Promises Promises - “a proxy for a value that will eventually become available”.
Async The async function declaration defines an asynchronous function, which returns an AsyncFunction object.
function resolveAfter2Seconds() { return new Promise(resolve =&amp;gt; { setTimeout(() =&amp;gt; { resolve(&#39;resolved&#39;); }, 2000); }); } async function asyncCall() { console.log(&#39;calling&#39;); var result = await resolveAfter2Seconds(); console.log(result); // expected output: &#39;resolved&#39; } asyncCall();  An async function can contain an await expression that pauses the execution of the async function and waits for the passed Promise&amp;rsquo;s resolution, and then resumes the async function&amp;rsquo;s execution and returns the resolved value.</description>
    </item>
    
    <item>
      <title>Redux 1</title>
      <link>/post/redux-1/</link>
      <pubDate>Mon, 01 Oct 2018 21:39:04 +0530</pubDate>
      
      <guid>/post/redux-1/</guid>
      <description>Redux is a predictable state container for JavaScript apps. import { createStore } from &amp;quot;redux&amp;quot;; //an import from the redux library const store = createStore(); // Takes reducer as argument  Store stores the states and reducers handles the communication
Reducers modifies the state based on action in pure state
In redux, all application state exists as a single store object
Spread operator or splat operator copies the contents of one array object into another.</description>
    </item>
    
    <item>
      <title>What Happens When</title>
      <link>/post/what-happens-when/</link>
      <pubDate>Mon, 23 Jul 2018 11:43:30 +0530</pubDate>
      
      <guid>/post/what-happens-when/</guid>
      <description>This is a short version of the question what happens when you enter google.com in your browser.  credit When you type &amp;ldquo;G&amp;rdquo;  The browser receives the event and the auto-complete functions kick in. Various suggestions will be presented to you in the dropbox below the URL bar   When you press &amp;ldquo;Enter&amp;rdquo;  Small amount of current to flow into the logic circuitry of the keyboard, which scans the state of each key switch, debounces the electrical noise of the rapid intermittent closure of the switch, and converts it to a keycode integer, in this case 13.</description>
    </item>
    
    <item>
      <title>Programms</title>
      <link>/post/programms/</link>
      <pubDate>Sun, 22 Jul 2018 13:51:09 +0530</pubDate>
      
      <guid>/post/programms/</guid>
      <description>Factorial &amp;lt;?php $number = 6; /*number to get factorial */ $fact = 1; for($k=1;$k&amp;lt;=$number;++$k) { $fact = $fact*$k; } echo &amp;quot;Factorial of $number is &amp;quot;.$fact; ?&amp;gt;  Fibonacci &amp;lt;?PHP $first = 0; $second = 1; echo $first.&#39;&amp;amp;nbsp;,&#39;; echo $second.&#39;&amp;amp;nbsp;,&#39;; for($limit=0;$limit&amp;lt;10;$limit++) { $third = $first+$second; echo $third.&#39;&amp;amp;nbsp;,&#39;;; $first = $second; $second = $third; } ?&amp;gt;  Amstrong &amp;lt;?php $number = $_POST[ &#39;number&#39; ]; // get the number entered by user $temp = $number; $sum = 0; while($temp !</description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>/post/javascript/</link>
      <pubDate>Sun, 22 Jul 2018 13:50:50 +0530</pubDate>
      
      <guid>/post/javascript/</guid>
      <description>Callback functions They are derived from a programming paradigm known as functional programmings
A callback function, also known as a higher-order function, is a function that is passed to another function Eg:
 $(&amp;quot;#btn_1&amp;quot;).click(function() { alert(&amp;quot;Btn 1 Clicked&amp;quot;); });  Functional programming (often abbreviated FP) is the process of building software by composing pure functions, avoiding shared state, mutable data, and side-effects
A pure function is a function which: Given the same inputs, always returns the same output, and Has no side-effects</description>
    </item>
    
    <item>
      <title>Laravel</title>
      <link>/post/laravel/</link>
      <pubDate>Fri, 20 Jul 2018 18:08:33 +0530</pubDate>
      
      <guid>/post/laravel/</guid>
      <description>LifeCycle
 Index.php loads the Composer generated autoloader definition, and then retrieves an instance of the Laravel application from bootstrap/app.php script. HTTP / Console Kernels Next, the incoming request is sent to either the HTTP kernel or the console kernel, depending on the type of request that is entering the application. These two kernels serve as the central location that all requests flow through. The HTTP kernel extends the Illuminate\Foundation\Http\Kernel class, which defines an array of bootstrappers that will be run before the request is executed.</description>
    </item>
    
    <item>
      <title>PHP Part 2</title>
      <link>/post/php-2/</link>
      <pubDate>Mon, 16 Jul 2018 13:14:11 +0530</pubDate>
      
      <guid>/post/php-2/</guid>
      <description>Error Control Operators  @ - Suppresses errors
 extract()  It converts array keys into variable names and array values into variable value.
  // input array $state = array(&amp;quot;AS&amp;quot;=&amp;gt;&amp;quot;ASSAM&amp;quot;, &amp;quot;OR&amp;quot;=&amp;gt;&amp;quot;ORRISA&amp;quot;, &amp;quot;KR&amp;quot;=&amp;gt;&amp;quot;KERELA&amp;quot;); extract($state); // after using extract() function echo&amp;quot;\$AS is $AS\n\$KR is $KR\n\$OR is $OR&amp;quot;; ------ $AS is ASSAM $KR is KERELA $OR is ORRISA  Autoload Every time you want to use a new class in your PHP project, first you need to include this class .</description>
    </item>
    
    <item>
      <title>PHP7</title>
      <link>/post/php7/</link>
      <pubDate>Thu, 12 Jul 2018 17:13:19 +0530</pubDate>
      
      <guid>/post/php7/</guid>
      <description>New to PHP 7  New Zend engine Fast Facilitates Error Handling using exceptions 64-Bit Windows Systems Support New Spaceship and Null Coalescing Operators(&amp;lt;=&amp;gt; The spaceship operator returns 0 if both operands are equal, 1 if the left is greater, and -1 if the right is greater. It’s also called a three-way comparison operator)  PHP 7  Scalar type declarations, has been introduced. Scalar type declaration has two options   coercive - coercive is default mode and need not to be specified.</description>
    </item>
    
    <item>
      <title>PHP Part 1</title>
      <link>/post/php-1/</link>
      <pubDate>Wed, 11 Jul 2018 17:02:17 +0530</pubDate>
      
      <guid>/post/php-1/</guid>
      <description>One important principle of OOP is that a class should do one thing, and it should do it well.  Polymorphism - which classes have different functionality while sharing a common interface.
 Implements to extend an interface in PM
 An interface is similar to a class except that it cannot contain code. An interface can define method names and arguments, but not the contents of the methods.A class can implement multiple interfaces.</description>
    </item>
    
  </channel>
</rss>