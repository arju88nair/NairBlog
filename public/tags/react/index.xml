<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on Today I learned</title>
    <link>/tags/react/</link>
    <description>Recent content in React on Today I learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2018, all rights reserved.</copyright>
    <lastBuildDate>Thu, 13 Dec 2018 22:04:51 +0530</lastBuildDate>
    
	<atom:link href="/tags/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React Hooks</title>
      <link>/post/react-hooks/</link>
      <pubDate>Thu, 13 Dec 2018 22:04:51 +0530</pubDate>
      
      <guid>/post/react-hooks/</guid>
      <description>React Hooks Lets you use state and other React features without writing a class.
 import { useState } from &#39;react&#39;; function Example() { // Declare a new state variable, which we&#39;ll call &amp;quot;count&amp;quot; const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt; Click me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); }  In React class components, side-effects were mostly introduced in lifecycle methods (e.</description>
    </item>
    
    <item>
      <title>React Hooks</title>
      <link>/post/react-js/</link>
      <pubDate>Thu, 13 Dec 2018 22:04:51 +0530</pubDate>
      
      <guid>/post/react-js/</guid>
      <description> Basics Components splits the UI into independent, reusable pieces, and think about each piece in isolation.
 function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } // OR class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } }  Rendering
function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } const element = &amp;lt;Welcome name=&amp;quot;Sara&amp;quot; /&amp;gt;; ReactDOM.render( element, document.getElementById(&#39;root&#39;) );  </description>
    </item>
    
    <item>
      <title>Redux 1</title>
      <link>/post/redux-1/</link>
      <pubDate>Mon, 01 Oct 2018 21:39:04 +0530</pubDate>
      
      <guid>/post/redux-1/</guid>
      <description>Redux is a predictable state container for JavaScript apps. import { createStore } from &amp;quot;redux&amp;quot;; //an import from the redux library const store = createStore(); // Takes reducer as argument  Store stores the states and reducers handles the communication
Reducers modifies the state based on action in pure state
In redux, all application state exists as a single store object
Spread operator or splat operator copies the contents of one array object into another.</description>
    </item>
    
  </channel>
</rss>